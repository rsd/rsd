#!/bin/bash

# rsd [rsd options] COMMAND [command options]
# rsd [rsd options] --version
# rsd [rsd options] --check-version
# rsd [rsd options] --install PATH
#
# Description:
#   rsd is a generic command loader from the command line
#
#   for commands, actually, are bash functions.
#   the idea is the group classes of commands (or tasks) into modules
#   and let rsd call it to have a unty experience
#
# rsd options:
#   --usage | --help | -h
#       Display help usage.
#   --version
#       Return the RSD version.
#   --check-version
#       Compares the local version to the one in the repository.
#   --install PATH
#       Install RSD in the provided PATH
#   --debug LEVEL | -d LEVEL
#       Sets the debug level
#   --lib-dir PATHs | -l PATHs | --libdir PATHs | --lib PATHs
#       Coma separated paths to search for libraries.
#   --no-local | -nl
#       Do not switch to a local rsd copy on the same directory.
#   --completion
#       Support for bash completion.
#       In completion mode, no command or action is actually executed.
#       No command file should exec in global space.
#
# Exit codes:
#   0 - SUCCESS
#   1 - Not bash 4
#   2 - Bad usage
#   3 - Command not found
#   4 - There is a new version in the repository
#   5 - Missing
#   6 - Missing system files (maybe not installed)
#   7 - Mismatch information
#   8 - To be done in the future
#   9 - Missing command line argument
#   10 - Command failure (unknown reason)
#   11 - Internal Failure

RSD_VERSION='0.2.5'
VERSION=$RSD_VERSION

RSD_DEBUG=0
DEBUG=$RSD_DEBUG

# The latest version of this file in the repository url
RSD_GITHUB_REPO="https://github.com/rsd/rsd.git"
RSD_LATEST_RSD_REPO="https://raw.githubusercontent.com/rsd/rsd/master/rsd"

# preserves arguments
RSD_ORIGINAL_ARGS="$0 $@"

# if a function returns error, this is the reason
# TODO: write a better API to handle errors
RSD_ERROR_MSG=""

# base path to libraries
RSD_LIBDIR=()
RSD_LIBDIR_temp=()
declare -A RSD_LIB_CACHE

RSD=$(basename $0)
RSD_RUN_DIR=$(readlink -f $(dirname $0))
RSD_LOCAL_DIR=$(pwd)

if [ "${BASH_VERSINFO[0]}" -lt 4 ]; then
	echo "Abort! BASH >= 4 required.  Got $BASH_VESION" >&2
	exit 1
fi

shopt -s extglob

declare -A RSD_ARGS=( ["subargs"]="" ["command"]="" )
# paramenters arguments
# 0 => No argument
# 1 => One argument
# unknown defaults to 1
declare -A RSD_ARGS_PARAM=( ["debug"]=1 ["d"]=1 ["version"]=0 ["check-version"]=0 \
			["lib-dir"]=1 ["l"]=1 ["install"]=1 ["no-local"]=0 \
			["nl"]=0 ["usage"]=0 ["help"]=0 ["h"]=0 \
			["rsdlib"]=0 ["completion"]=0 \
			["usage"]=0 ["help"]=0 ["h"]=0 \
			)

function rsd::version_gt() {
	test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
}

function rsd::usage() {
	local command

	echo "$RSD v$RSD_VERSION"
	echo "Usage:"
echo c:$RSD_COMMAND
	if [[ -z "$RSD_COMMAND" ]]; then
		echo -e "\t$RSD [RSD OPTIONS] COMMAND [command options]"
		echo -e "\t$RSD [RSD OPTIONS] --version"
		echo -e "\t$RSD [RSD OPTIONS] --check-version"
		echo -e "\t$RSD [RSD OPTIONS] --install PATH"
		echo
		echo -e "\tRSD OPTIONS:"
		echo -e "\t\t--usage | --help | -h"
		echo -e "\t\t\tDisplay help usage."
		echo -e "\t\t--version"
		echo -e "\t\t\tReturn the RSD version."
		echo -e "\t\t--check-version"
		echo -e "\t\t\tCompares the local version to the one in the repository."
		echo -e "\t\t--install PATH"
		echo -e "\t\t\tInstall RSD in the provided PATH"
		echo -e "\t\t--debug LEVEL | -d LEVEL"
		echo -e "\t\t\tSets the debug level"
		echo -e "\t\t--lib-dir PATHs | -l PATHs | --libdir PATHs | --lib PATHs"
		echo -e "\t\t\tComa separated paths to search for libraries."
		echo -e "\t\t--no-local | -nl"
		echo -e "\t\t\tDo not switch to a local rsd copy on the same directory."
		echo -e "\t\t--completion"
		echo -e "\t\t\tSupport for bash completion."

		if bash::is_function rsd::list_all_commands; then
		echo -e "\tCommands:"
		for command in $(rsd::list_all_commands); do
			echo -e "\t\t$command"
		done
		fi
	else
		if bash::is_function rsd::list_all_actions; then
		echo -e "\t$RSD [RSD OPTIONS] $RSD_COMMAND <action> [COMMAND OPTIONS]"
		echo -e "\tActions for $RSD_COMMAND:"
		rsd::list_all_actions $RSD_COMMAND
		else
		echo -e "\t$RSD [RSD OPTIONS] <command> "
		fi
	fi
	exit 2
}

function rsd::debug() {
	local msg=$1
	shift
	local level=1

	if (($#>0));then
		level=$1
	fi
	if (( $RSD_DEBUG >= $level )); then
		echo "$level:$msg"
	fi
}

#same as rsd::debug, but the level comes first, for convenience
function rsd::debug2() {
	local level=$1
	shift

	if (( $RSD_DEBUG >= $level )); then
		echo "$level:" $@
	fi
}

# same as rsd::debug, but to STDERR
function rsd::warn() {
	local msg=$1
	shift
	local level=1

	if (($#>0));then
		level=$1
	fi
	if (( $RSD_DEBUG >= $level )); then
		echo "$level:$msg" >&2
	fi
}

# same as rsd::debug2, but to STDERR
function rsd::warn2() {
	local level=$1
	shift

	if (( $RSD_DEBUG >= $level )); then
		echo "$level:" $@ >&2
	fi
}

#Finds a file in the path
function rsd::check_binary() {
	local file=$1
	local path
	local IFS=":"

	for path in $PATH; do
		if [[ -f "$path/$file" ]]; then
		return 0
		fi
	done

	RSD_ERROR_MSG="Command $file not in PATH."
	return 1
}

function rsd::check_binaries() {
	local file
	local path
	local IFS=":"

	for file in $*;  do
		if ! rsd::check_binary $file; then
		return 1
		fi
	done
	return 0
}

function rsd::check_binaries_or_fail() {
	if ! rsd::check_binaries $@; then
		rsd::warn $RSD_ERROR_MSG
		exit 3
	fi
	return 0
}

# for debug, it has to be done in the script, command line does not work so soon
# TODO: make an exception if the argument does not exist
function rsd::parse_args() {
	local arg
	local count=0

	rsd::debug2 8 "rsd::parse_args: Total: $#, Arguments:" $@
	rsd::debug2 8 "rsd::parse_args: RSD_ARGS subargs: " ${RSD_ARGS["subargs"]}

	RSD_ARGS["subargs"]=

	while [ $# -gt 0 ]; do
		case "$1" in
		--*)
		arg=${1:2}
		if bash::key_exists $arg in RSD_ARGS_PARAM; then
			if [[ "${RSD_ARGS_PARAM[$arg]}" == "0" ]]; then
			RSD_ARGS[${arg,,}]=1
			else
			if [[ -z $2 ]]; then
				rsd::warn "Abort! Missing argumento to $arg."
				exit 9
			fi
			RSD_ARGS[${arg,,}]=$2
			shift
			fi
		else
			RSD_ARGS[${arg,,}]=$2
			shift
		fi
		;;
		-*)
		arg=${1:1}
		if bash::key_exists $arg in RSD_ARGS_PARAM; then
			if [[ "${RSD_ARGS_PARAM[$arg]}" == "0" ]]; then
			RSD_ARGS[${arg,,}]=1
			else
			if [[ -z $2 ]]; then
				rsd::warn "Abort! Missing argumento to $arg."
				exit 9
			fi
			RSD_ARGS[${arg,,}]=$2
			shift
			fi
		else
			RSD_ARGS[${arg,,}]=$2
			shift
		fi
		;;
		*)
		if ((count == 1)); then
			RSD_ARGS["subargs"]=$*
			shift
			break
		fi
		RSD_ARGS["command"]=$1

		((count++))
		;;
		esac
		shift
	done

	local key
	for key in ${!RSD_ARGS[@]}; do
		rsd::debug2 8 "parse_agrs: arguments: $key: ${RSD_ARGS[$key]}"
	done

	return 0
}

# from bash_extensions.lib
function bash::key_exists() {
	if [[ "$2" != "in" ]]; then
		rsd::warn "Abort! Incorrect usage of bash::key_exists."
		rsd::warn "Correct usage: bash::key_exists {key} in {array}"
		exit 11
	fi
	eval '[ ${'$3'[$1]+muahaha} ]'
}

# check the latest version in the repository
function rsd::check_repository_version() {
	local repo_version
	rsd::check_binaries_or_fail wget grep head

	repo_version=$(wget -q -O - $RSD_LATEST_RSD_REPO | grep ^RSD_VERSION= \
			| head -n 1 | sed -e "s/.*=['\"]\(.*\)['\"]/\1/")

	if rsd::version_gt $repo_version $RSD_VERSION; then
		RSD_ERROR_MSG="There is a newer version in the repository: $repo_version.  Our version: $RSD_VERSION."
		return 1
	elif [[ $repo_version == $RSD_VERSION ]]; then
		RSD_ERROR_MSG="You are using the latest version: $RSD_VERSION."
	else
		RSD_ERROR_MSG="Your version: $RSD_VERSION is newer that the one in the repository: $repo_version."
	fi

	return 0
}

# Search all LIBDIRs for a file and return it on STDOUT
# Returns the first match
# Search order:
# - Each command line argument,
# - Each config option (TODO),
# - Current path,
# - rsd installation dir (if it is a symlink),
# - bash source base,
# - in user's home (TODO) and
# - system wide install (TODO)
function rsd::get_libdir_file() {
	rsd::check_binaries_or_fail pwd
	file=$1
	print=${2:-1}
	local libdir

	#check cache first
	if [[ -n "${RSD_LIB_CACHE[$file]}" ]]; then
		if ((print)); then
			echo ${RSD_LIB_CACHE[$file]}
		fi
		return 0
	fi

	for libdir in "${RSD_LIBDIR[@]}" $(pwd) $(dirname $(readlink -f $0)) $(dirname ${BASH_SOURCE[@]}); do
		if [[ -e "$libdir/$file" ]]; then
			RSD_LIB_CACHE[$file]="$libdir/$file"
			if ((print)); then
				echo "$libdir/$file"
			fi
			return 0
		fi
	done
	return 1
}

#just check if a file exists in LIBDIR
function rsd::check_libdir_file() {
	rsd::get_libdir_file $1 0
	return $?
}

# __main__
# FIXME: as a recursive command calling, this is worked outside a function (for now at least)

RSD_ORIGINAL_ARGS="$0 $@"
rsd::parse_args $*

# import rsd::debug level
if   [[ ${RSD_ARGS[debug]} ]]; then
	RSD_DEBUG=${RSD_ARGS[debug]}
elif [[ ${RSD_ARGS[d]} ]]    ; then
	RSD_DEBUG=${RSD_ARGS[d]}
fi
rsd::debug "Debug set to $RSD_DEBUG" 2
rsd::debug2 9 "Arguments parsed (values): keys -> (${RSD_ARGS[@]}): " ${!RSD_ARGS[@]}
rsd::debug "Original call was $RSD_ORIGINAL_ARGS" 7

# swith to a local copy if any (local == pwd)
if ! [[ ${RSD_ARGS[no-local]} || ${RSD_ARGS[nl]} ]]; then
	rsd::debug2 20 "RUN DIR: $RSD_RUN_DIR, LOCAL DIR: $RSD_LOCAL_DIR"
	if [[ "$RSD_RUN_DIR" != "$RSD_LOCAL_DIR" ]]; then
		RSD_LOCAL_RSD="$RSD_LOCAL_DIR/$RSD"
		if [[ -x  "$RSD_LOCAL_RSD" ]]; then
		#get version
		RSD_LOCAL_VERSION=$( $RSD_LOCAL_RSD --version)
		if rsd::version_gt $RSD_LOCAL_VERSION $VERSION; then
			if [[ -z ${RSD_ARGS[completion]} ]]; then
			rsd::warn "Switching to local version (-nl to avoid)."
			fi
			$RSD_LOCAL_RSD $@
			exit 0
		fi
		fi
	fi
fi

# downloads and install
# check version
if [[ ${RSD_ARGS[install]} ]]; then
	rsd::check_binaries_or_fail git
	echo "Installing latest rsd from repository."
	git clone --depth 1 $RSD_GITHUB_REPO ${RSD_ARGS[install]}
	exit $?
fi

# Expands libdir search paths
if bash::key_exists lib-dir in RSD_ARGS; then
	IFS=',' read -r -a RSD_LIBDIR <<< "${RSD_ARGS["lib-dir"]}"
fi
if bash::key_exists l in RSD_ARGS; then
	IFS=',' read -r -a RSD_LIBDIR_temp <<< "${RSD_ARGS["l"]}"
	RSD_LIBDIR=("${RSD_LIBDIR[@]}" "${RSD_LIBDIR_temp[@]}")
fi
if bash::key_exists libdir in RSD_ARGS; then
	IFS=',' read -r -a RSD_LIBDIR_temp <<< "${RSD_ARGS["libdir"]}"
	RSD_LIBDIR=("${RSD_LIBDIR[@]}" "${RSD_LIBDIR_temp[@]}")
fi
if bash::key_exists lib in RSD_ARGS; then
	IFS=',' read -r -a RSD_LIBDIR_temp <<< "${RSD_ARGS["lib"]}"
	RSD_LIBDIR=("${RSD_LIBDIR[@]}" "${RSD_LIBDIR_temp[@]}")
fi

if ! rsd::check_libdir_file lib/rsd.lib; then
	rsd::warn "Abort! Could not find libdir.  Maybe it need to be installed --install (TODO)."
	exit 5
fi

# library to be loaded from outside (e.g. completion)
if [[ -n "${RSD_ARGS[rsdlib]}" ]]; then
	echo $(rsd::get_libdir_file lib/rsd.lib)
	exit 0
fi

# version
if [[ ${RSD_ARGS[version]} ]]; then
	echo $RSD_VERSION
	exit 0
fi

# check version
if [[ ${RSD_ARGS[check-version]} ]]; then
	if ! rsd::check_repository_version; then
		rsd::warn $RSD_ERROR_MSG
		exit 4
	else
		rsd::warn $RSD_ERROR_MSG
		exit 0
	fi
fi

# load our main library
# after this point there is a need to the full installation
#Now load our defaults
source $(rsd::get_libdir_file lib/rsd.lib)

if rsd::check_libdir_file lib/bash_extensions.lib; then
	source $(rsd::get_libdir_file lib/bash_extensions.lib)
else
	rsd::warn "Abort! Missing bash extensions library."
	exit 5
fi



if [[ -z "${RSD_ARGS[command]}" ]]; then
	if ! [[ ${RSD_ARGS[completion]} ]]; then
		rsd::usage
	fi
fi

if [[ "${RSD_ARGS[command]}" ]]; then
	RSD_COMMAND=${RSD_ARGS[command]}

	# import the calling command script
	_rsd_source=$(rsd::load_command_file $RSD_COMMAND)
	if (($?)); then
		rsd::warn "Command $RSD_COMMAND not found"
		rsd::usage
	fi

	# sourcing the command, any argument left is passed to
	eval $_rsd_source ${RSD_ARGS[subargs]}
fi


# help and usage
if [[ ${RSD_ARGS[usage]} || ${RSD_ARGS[help]} || ${RSD_ARGS[h]} ]]; then
	rsd::usage
fi

# execute the command function and pass the rest of the arguments
# if there is a command function arguments are given and let it takes control
if [[ ${RSD_ARGS[command]} ]]; then
	if ! [[ ${RSD_ARGS[completion]} ]]; then
		rsd::command $RSD_COMMAND
	fi
fi



# FIXME: for now
exit 0
